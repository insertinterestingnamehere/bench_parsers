(KEYWORD from)
(ID itertools)
(KEYWORD import)
(ID islice)
(NEWLINE)
(KEYWORD from)
(ID collections)
(KEYWORD import)
(ID namedtuple)
(PUNCT ",")
(ID deque)
(NEWLINE)
(KEYWORD def)
(ID index_grammar)
(PUNCT "(")
(ID grammar)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Transform a grammar represented as a dict mapping\n    strings to sets/lists/tuples of tuples of strings\n    into a grammar represented entirely as integer indices\n    into a list of strings storing the actual names of the\n    tokens used in the grammar. Return the integer grammar,\n    the corresponding list of symbols, and a map to convert\n    from a given string to the corresponding index.\n    ")
(NEWLINE)
(ID index_grammar)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID symbols)
(PUNCT "=")
(ID list)
(PUNCT "(")
(ID grammar)
(PUNCT ".")
(ID keys)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID existing_indices)
(PUNCT "=")
(PUNCT "{")
(ID sym)
(PUNCT ":")
(ID idx)
(KEYWORD for)
(ID idx)
(PUNCT ",")
(ID sym)
(KEYWORD in)
(ID enumerate)
(PUNCT "(")
(ID symbols)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID nonterminal)
(PUNCT ",")
(ID productions)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_productions)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID production)
(KEYWORD in)
(ID productions)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_production)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID symbol)
(KEYWORD in)
(ID production)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID symbol)
(KEYWORD not)
(KEYWORD in)
(ID existing_indices)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID existing_indices)
(PUNCT "[")
(ID symbol)
(PUNCT "]")
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID symbols)
(PUNCT ")")
(NEWLINE)
(ID int_production)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID len)
(PUNCT "(")
(ID symbols)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID symbols)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID symbol)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_production)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID existing_indices)
(PUNCT "[")
(ID symbol)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID int_productions)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID int_production)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID index_grammar)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID int_productions)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID index_grammar)
(PUNCT ",")
(ID symbols)
(PUNCT ",")
(ID existing_indices)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID index_productions)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID existing_indices)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Given a grammar where the tokens have already been transformed to\n    integer indices, construct a new grammar where production outputs\n    and their corresponding nonterminals are stored as indices into\n    lists. This reduces each production to a namedtuple of three integers.\n    This function outputs a grammar transformed into a productions referencing\n    the original list of productions\n    ")
(NEWLINE)
(ID first_terminal)
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID grammar)
(PUNCT ")")
(NEWLINE)
(ID lhs_indices)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID rhs_indices)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID indexed_productions)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID ntm)
(PUNCT ",")
(ID outputs)
(KEYWORD in)
(ID enumerate)
(PUNCT "(")
(ID grammar)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_outputs)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID output)
(KEYWORD in)
(ID outputs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_outputs)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID len)
(PUNCT "(")
(ID rhs_indices)
(PUNCT ")")
(PUNCT ",")
(LIT "0")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID rhs_indices)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID output)
(PUNCT ")")
(NEWLINE)
(ID lhs_indices)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID ntm)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID indexed_productions)
(PUNCT "[")
(PUNCT "(")
(ID ntm)
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID new_outputs)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID indexed_productions)
(PUNCT ",")
(ID lhs_indices)
(PUNCT ",")
(ID rhs_indices)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID index_token_stream)
(PUNCT "(")
(ID symbol_indices)
(PUNCT ",")
(ID tokens)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Transform an input stream of tokens into a series of indices\n    into a given list of indices into the list of symbols in the\n    grammar and a list of terminal token contents that show up in\n    the input token stream. This function returns both the transformed\n    stream of tokens and the new list of terminal token contents.\n    Return the list of tokens represented as integers, the corresponding\n    list of token contents, and a dictionary mapping contents to their\n    corresponding indices.\n    ")
(NEWLINE)
(ID int_tokens)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID contents)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID content_lookup)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID tk)
(KEYWORD in)
(ID tokens)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID type)
(PUNCT "(")
(ID tk)
(PUNCT ")")
(KEYWORD is)
(ID str)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID tk)
(PUNCT "=")
(PUNCT "(")
(ID tk)
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID tp)
(PUNCT "=")
(ID tk)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(NEWLINE)
(ID val)
(PUNCT "=")
(KEYWORD None)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID len)
(PUNCT "(")
(ID tk)
(PUNCT ")")
(PUNCT ">")
(LIT "1")
(PUNCT ")")
(KEYWORD else)
(ID tk)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID val)
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_tokens)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID symbol_indices)
(PUNCT "[")
(ID tp)
(PUNCT "]")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID val)
(KEYWORD in)
(ID content_lookup)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_tokens)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID symbol_indices)
(PUNCT "[")
(ID tp)
(PUNCT "]")
(PUNCT ",")
(ID content_lookup)
(PUNCT "[")
(ID val)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID int_tokens)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID symbol_indices)
(PUNCT "[")
(ID tp)
(PUNCT "]")
(PUNCT ",")
(ID len)
(PUNCT "(")
(ID contents)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID contents)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID val)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID int_tokens)
(PUNCT ",")
(ID contents)
(PUNCT ",")
(ID content_lookup)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID filter_empty_nonterminals)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ",")
(ID empty)
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID empty)
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID empty)
(PUNCT "=")
(PUNCT "{")
(ID ntm)
(KEYWORD for)
(ID ntp)
(PUNCT ",")
(ID pds)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID len)
(PUNCT "(")
(ID pds)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID contains_empty)
(PUNCT "(")
(ID pd)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID outputs)
(PUNCT "=")
(ID base_outputs)
(PUNCT "[")
(ID pd)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID tkn)
(KEYWORD in)
(ID outputs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID tkn)
(PUNCT "<")
(ID first_terminal)
(KEYWORD and)
(ID tkn)
(KEYWORD in)
(ID empty)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID len)
(PUNCT "(")
(ID empty)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID grammar)
(PUNCT "=")
(PUNCT "{")
(ID ntm)
(PUNCT ":")
(PUNCT "[")
(ID pd)
(KEYWORD for)
(ID pd)
(KEYWORD in)
(ID pds)
(KEYWORD if)
(KEYWORD not)
(ID contains_empty)
(PUNCT "(")
(ID pd)
(PUNCT ")")
(PUNCT "]")
(KEYWORD for)
(ID ntm)
(PUNCT ",")
(ID pds)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID ntm)
(KEYWORD not)
(KEYWORD in)
(ID empty)
(PUNCT "}")
(NEWLINE)
(ID empty)
(PUNCT "=")
(PUNCT "{")
(ID ntm)
(KEYWORD for)
(ID ntp)
(PUNCT ",")
(ID pds)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID len)
(PUNCT "(")
(ID pds)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID grammar)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID nullability_filter)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID filtered)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID empty)
(PUNCT "=")
(ID set)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID ntm)
(PUNCT ",")
(ID pds)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_pds)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID ntm_index)
(PUNCT ",")
(ID lders)
(PUNCT "=")
(ID ntm)
(NEWLINE)
(KEYWORD for)
(ID pd)
(KEYWORD in)
(ID pds)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(ID rders)
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID outputs)
(PUNCT "=")
(ID islice)
(PUNCT "(")
(ID base_outputs)
(PUNCT "[")
(ID original_parent)
(PUNCT "]")
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID lders)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID lders)
(PUNCT "==")
(ID rders)
(KEYWORD and)
(ID ntm_index)
(PUNCT "==")
(ID base_outputs)
(PUNCT "[")
(ID original_parent)
(PUNCT "]")
(PUNCT "[")
(ID rindex)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID idx)
(KEYWORD in)
(ID outputs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID idx)
(PUNCT ">=")
(ID first_terminal)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_pds)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID pd)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID idx)
(KEYWORD in)
(ID outputs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID idx)
(PUNCT ">=")
(ID first_terminal)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID ntm_index)
(PUNCT "==")
(ID idx)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_pds)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID pd)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID new_pds)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID filtered)
(PUNCT "[")
(ID ntm)
(PUNCT "]")
(PUNCT "=")
(ID new_pds)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID empty)
(PUNCT ".")
(ID add)
(PUNCT "(")
(ID ntm)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID filtered)
(PUNCT "=")
(ID filter_empty_nonterminals)
(PUNCT "(")
(ID filtered)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ",")
(ID empty)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID filtered)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID nullables)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID grammar)
(PUNCT "=")
(ID nullability_filter)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ")")
(NEWLINE)
(ID nullable)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID ntm)
(PUNCT ",")
(ID pds)
(KEYWORD in)
(ID grammar)
(PUNCT ".")
(ID items)
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID pd)
(KEYWORD in)
(ID pds)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID pd)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(PUNCT "==")
(ID len)
(PUNCT "(")
(ID base_outputs)
(PUNCT "[")
(ID pd)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID nullable)
(PUNCT "[")
(ID ntm)
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID pd)
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID prev_len)
(PUNCT "=")
(LIT "0")
(NEWLINE)
(ID non_nullable)
(PUNCT "=")
(ID set)
(PUNCT "(")
(ID grammar)
(PUNCT ".")
(ID keys)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "-")
(ID set)
(PUNCT "(")
(ID nullable)
(PUNCT ".")
(ID keys)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID prev_len)
(PUNCT "<")
(ID len)
(PUNCT "(")
(ID nullable)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID prev_len)
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID nullable)
(PUNCT ")")
(NEWLINE)
(ID newly_nullable)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID ntm)
(KEYWORD in)
(ID non_nullable)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID pd)
(KEYWORD in)
(ID grammar)
(PUNCT "[")
(ID ntm)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID output)
(PUNCT "=")
(ID islice)
(PUNCT "(")
(ID base_outputs)
(PUNCT "[")
(ID pd)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT "]")
(PUNCT ",")
(ID pd)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID first)
(PUNCT "=")
(ID next)
(PUNCT "(")
(ID output)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID first)
(PUNCT ",")
(ID pd)
(PUNCT "[")
(LIT "2")
(PUNCT "]")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID nullable)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID all)
(PUNCT "(")
(PUNCT "(")
(ID idx)
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(KEYWORD in)
(ID nullable)
(KEYWORD for)
(ID idx)
(KEYWORD in)
(ID output)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID nullable)
(PUNCT "[")
(ID ntm)
(PUNCT "]")
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID newly_nullable)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID ntm)
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID ntm)
(KEYWORD in)
(ID newly_nullable)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID non_nullable)
(PUNCT ".")
(ID discard)
(PUNCT "(")
(ID ntm)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID nullable)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID diff_grammar)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID nulls)
(PUNCT ",")
(ID start)
(PUNCT ",")
(ID wrt)
(PUNCT ",")
(ID first_grammar)
(PUNCT ",")
(ID first_nulls)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID records)
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID first_terminal)
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID first_grammar)
(PUNCT ")")
(NEWLINE)
(ID derivations)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID work_items)
(PUNCT "=")
(ID deque)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID work_items)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID start)
(PUNCT ")")
(NEWLINE)
(ID der_grammar)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID new_nulls)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID reverse_lookups)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID recording)
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID records)
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID recording)
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID record)
(PUNCT "=")
(PUNCT "{")
(LIT "'copy'")
(PUNCT ":")
(LIT "0")
(PUNCT ",")
(LIT "'predict'")
(PUNCT ":")
(LIT "0")
(PUNCT ",")
(LIT "'end'")
(PUNCT ":")
(LIT "0")
(PUNCT ",")
(LIT "'scan'")
(PUNCT ":")
(LIT "0")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID work_items)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID ntm)
(PUNCT "=")
(ID work_items)
(PUNCT ".")
(ID popleft)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID index)
(PUNCT ",")
(ID derivatives)
(PUNCT "=")
(ID ntm)
(NEWLINE)
(ID der_ntm)
(PUNCT "=")
(PUNCT "(")
(ID index)
(PUNCT ",")
(ID derivatives)
(PUNCT "+")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID der_ntm)
(KEYWORD in)
(ID der_grammar)
(KEYWORD or)
(ID ntm)
(KEYWORD not)
(KEYWORD in)
(ID grammar)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID index)
(PUNCT ",")
(ID derivatives)
(PUNCT "=")
(ID ntm)
(NEWLINE)
(ID ders)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID pd)
(KEYWORD in)
(ID grammar)
(PUNCT "[")
(ID ntm)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(ID rders)
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID parent)
(PUNCT "=")
(ID base_outputs)
(PUNCT "[")
(ID original_parent)
(PUNCT "]")
(NEWLINE)
(ID rhs)
(PUNCT "=")
(ID islice)
(PUNCT "(")
(ID parent)
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID rhs_all_null)
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID lead_sym)
(PUNCT "=")
(ID next)
(PUNCT "(")
(ID rhs)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID StopIteration)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID lead_sym)
(PUNCT "<")
(ID first_terminal)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID lead_ntm)
(PUNCT "=")
(PUNCT "(")
(ID lead_sym)
(PUNCT ",")
(ID rders)
(PUNCT ")")
(NEWLINE)
(ID work_items)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID lead_ntm)
(PUNCT ")")
(NEWLINE)
(ID der_prod)
(PUNCT "=")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(ID rders)
(PUNCT "+")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'copy'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(ID ders)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID der_prod)
(PUNCT ")")
(NEWLINE)
(ID derivations)
(PUNCT "[")
(ID der_prod)
(PUNCT "]")
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID lead_is_nullable)
(PUNCT "=")
(PUNCT "(")
(KEYWORD not)
(ID rders)
(KEYWORD and)
(ID first_nulls)
(PUNCT "[")
(ID lead_sym)
(PUNCT "]")
(PUNCT ")")
(KEYWORD or)
(ID lead_ntm)
(KEYWORD in)
(ID nulls)
(NEWLINE)
(KEYWORD if)
(ID lead_is_nullable)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID rindex)
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'end'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID lead_sym)
(PUNCT "==")
(ID wrt)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID der_prod)
(PUNCT "=")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT "+")
(LIT "1")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID derivations)
(PUNCT "[")
(ID der_prod)
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID pd)
(PUNCT ",")
(ID wrt)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'scan'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(ID ders)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT "+")
(LIT "1")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID rhs_sym)
(KEYWORD in)
(ID rhs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID rhs_sym)
(PUNCT ">=")
(ID first_terminal)
(KEYWORD or)
(KEYWORD not)
(ID first_nulls)
(PUNCT "[")
(ID rhs_sym)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_nulls)
(PUNCT "[")
(ID der_ntm)
(PUNCT "]")
(PUNCT "=")
(ID der_prod)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID lead_is_nullable)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID start_of_generated)
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID ders)
(PUNCT ")")
(PUNCT "-")
(LIT "1")
(NEWLINE)
(KEYWORD for)
(ID sym)
(KEYWORD in)
(ID rhs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID sym)
(PUNCT "<")
(ID first_terminal)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID r_ntm)
(PUNCT "=")
(PUNCT "(")
(ID sym)
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID der_prod)
(PUNCT "=")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT ",")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'predict'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(ID ders)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID der_prod)
(PUNCT ")")
(NEWLINE)
(ID derivations)
(PUNCT "[")
(ID der_prod)
(PUNCT "]")
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID work_items)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID r_ntm)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID first_nulls)
(PUNCT "[")
(ID sym)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID rindex)
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'end'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID other_sym)
(KEYWORD in)
(ID rhs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID first_terminal)
(PUNCT "<=")
(ID other_sym)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID first_nulls)
(PUNCT "[")
(ID other_sym)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID rhs_der_ntm)
(PUNCT "=")
(PUNCT "(")
(ID sym)
(PUNCT ",")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(ID lead_backtraces)
(PUNCT "=")
(ID reverse_lookups)
(PUNCT ".")
(ID get)
(PUNCT "(")
(ID rhs_der_ntm)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID lead_backtraces)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID lead_backtraces)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID der_prod)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID reverse_lookups)
(PUNCT "[")
(ID rhs_der_ntm)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID der_prod)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID sym)
(PUNCT "==")
(ID wrt)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID der_prod)
(PUNCT "=")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT "+")
(LIT "1")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID derivations)
(PUNCT "[")
(ID der_prod)
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID pd)
(PUNCT ",")
(ID wrt)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'scan'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(ID ders)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID original_parent)
(PUNCT ",")
(ID rindex)
(PUNCT "+")
(LIT "1")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID rhs_sym)
(KEYWORD in)
(ID rhs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID rhs_sym)
(PUNCT ">=")
(ID first_terminal)
(KEYWORD or)
(KEYWORD not)
(ID first_nulls)
(PUNCT "[")
(ID rhs_sym)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID new_nulls)
(PUNCT "[")
(ID der_ntm)
(PUNCT "]")
(PUNCT "=")
(ID der_prod)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID rhs_prod)
(KEYWORD in)
(ID islice)
(PUNCT "(")
(ID ders)
(PUNCT ",")
(ID start_of_generated)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID original_parent)
(PUNCT ",")
(ID right_index)
(PUNCT ",")
(ID right_ders)
(PUNCT "=")
(ID rhs_prod)
(NEWLINE)
(ID rhs_der_ntm)
(PUNCT "=")
(PUNCT "(")
(ID base_outputs)
(PUNCT "[")
(ID original_parent)
(PUNCT "]")
(PUNCT "[")
(ID right_index)
(PUNCT "]")
(PUNCT ",")
(ID right_ders)
(PUNCT ")")
(NEWLINE)
(ID lead_backtraces)
(PUNCT "=")
(ID reverse_lookups)
(PUNCT ".")
(ID get)
(PUNCT "(")
(ID rhs_der_ntm)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID lead_backtraces)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID lead_backtraces)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID rhs_prod)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID reverse_lookups)
(PUNCT "[")
(ID rhs_der_ntm)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID rhs_prod)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID rhs_sym)
(KEYWORD in)
(ID rhs)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID rhs_sym)
(PUNCT ">=")
(ID first_terminal)
(KEYWORD or)
(KEYWORD not)
(ID first_nulls)
(PUNCT "[")
(ID rhs_sym)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID der_lead_ntm)
(PUNCT "=")
(PUNCT "(")
(ID lead_sym)
(PUNCT ",")
(ID rders)
(PUNCT "+")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(ID lead_backtraces)
(PUNCT "=")
(ID reverse_lookups)
(PUNCT ".")
(ID get)
(PUNCT "(")
(ID der_lead_ntm)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID lead_backtraces)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID lead_backtraces)
(PUNCT ".")
(ID append)
(PUNCT "(")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID der_prod)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID reverse_lookups)
(PUNCT "[")
(ID der_lead_ntm)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID der_ntm)
(PUNCT ",")
(ID der_prod)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID der_grammar)
(PUNCT "[")
(PUNCT "(")
(ID index)
(PUNCT ",")
(ID derivatives)
(PUNCT "+")
(LIT "1")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID ders)
(NEWLINE)
(DEDENT)
(ID der_grammar)
(PUNCT ".")
(ID update)
(PUNCT "(")
(ID first_grammar)
(PUNCT ")")
(NEWLINE)
(ID der_start)
(PUNCT "=")
(PUNCT "(")
(ID start)
(PUNCT "[")
(LIT "0")
(PUNCT "]")
(PUNCT ",")
(ID start)
(PUNCT "[")
(LIT "1")
(PUNCT "]")
(PUNCT "+")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(ID work_list)
(PUNCT "=")
(ID deque)
(PUNCT "(")
(ID new_nulls)
(PUNCT ".")
(ID keys)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID work_list)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID current)
(PUNCT "=")
(ID work_list)
(PUNCT ".")
(ID popleft)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID dflt)
(PUNCT "=")
(ID tuple)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID der_ntm)
(PUNCT ",")
(ID pd)
(KEYWORD in)
(ID reverse_lookups)
(PUNCT ".")
(ID get)
(PUNCT "(")
(ID current)
(PUNCT ",")
(ID dflt)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID der_ntm)
(KEYWORD not)
(KEYWORD in)
(ID new_nulls)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID record)
(PUNCT "[")
(LIT "'end'")
(PUNCT "]")
(PUNCT "+=")
(LIT "1")
(NEWLINE)
(DEDENT)
(ID new_nulls)
(PUNCT "[")
(ID der_ntm)
(PUNCT "]")
(PUNCT "=")
(ID pd)
(NEWLINE)
(ID work_list)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID der_ntm)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID recording)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID records)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID record)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID der_start)
(PUNCT ",")
(ID der_grammar)
(PUNCT ",")
(ID derivations)
(PUNCT ",")
(ID new_nulls)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID grammar_contains)
(PUNCT "(")
(ID input_grammar)
(PUNCT ",")
(ID input_tokens)
(PUNCT ",")
(ID start_symbol)
(PUNCT ",")
(ID records)
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID base_grammar)
(PUNCT ",")
(ID symbols)
(PUNCT ",")
(ID symbol_indices)
(PUNCT "=")
(ID index_grammar)
(PUNCT "(")
(ID input_grammar)
(PUNCT ")")
(NEWLINE)
(ID start)
(PUNCT "=")
(PUNCT "(")
(ID symbol_indices)
(PUNCT "[")
(ID start_symbol)
(PUNCT "]")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID first_grammar)
(PUNCT ",")
(ID base_nonterminals)
(PUNCT ",")
(ID base_outputs)
(PUNCT "=")
(ID index_productions)
(PUNCT "(")
(ID base_grammar)
(PUNCT ",")
(ID symbol_indices)
(PUNCT ")")
(NEWLINE)
(ID first_terminal)
(PUNCT "=")
(ID len)
(PUNCT "(")
(ID first_grammar)
(PUNCT ")")
(NEWLINE)
(ID tokens)
(PUNCT ",")
(ID contents)
(PUNCT ",")
(ID content_lookup)
(PUNCT "=")
(ID index_token_stream)
(PUNCT "(")
(ID symbol_indices)
(PUNCT ",")
(ID input_tokens)
(PUNCT ")")
(NEWLINE)
(ID grammar)
(PUNCT "=")
(ID first_grammar)
(NEWLINE)
(ID first_nulls_derivations)
(PUNCT "=")
(ID nullables)
(PUNCT "(")
(ID first_grammar)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID first_terminal)
(PUNCT ")")
(NEWLINE)
(ID first_nulls)
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID ntm)
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(KEYWORD in)
(ID first_nulls_derivations)
(KEYWORD for)
(ID ntm)
(KEYWORD in)
(ID range)
(PUNCT "(")
(ID first_terminal)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID nulls)
(PUNCT "=")
(ID dict)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID all_derivations)
(PUNCT "=")
(ID list)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID tkn)
(KEYWORD in)
(ID tokens)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID start)
(PUNCT ",")
(ID grammar)
(PUNCT ",")
(ID derivations)
(PUNCT ",")
(ID nulls)
(PUNCT "=")
(ID diff_grammar)
(PUNCT "(")
(ID grammar)
(PUNCT ",")
(ID nulls)
(PUNCT ",")
(ID start)
(PUNCT ",")
(ID tkn)
(PUNCT ",")
(ID first_grammar)
(PUNCT ",")
(ID first_nulls)
(PUNCT ",")
(ID base_outputs)
(PUNCT ",")
(ID records)
(PUNCT "=")
(ID records)
(PUNCT ")")
(NEWLINE)
(ID all_derivations)
(PUNCT ".")
(ID append)
(PUNCT "(")
(ID derivations)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID start)
(KEYWORD in)
(ID nulls)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ENDMARKER)

